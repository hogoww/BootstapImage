THERE_BE_DRAGONS_HERE

22 December 2019 8:10:55.275245 am

VM: Mac OS - intel - 1014.6 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.0rc1 [Build information: Pharo-7.0.0+rc1.build.1419.sha.343f470940f4095869eb9ab2cdd985dd64544b6b (32 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(390812416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1993@3679)
		owner: 	a TransformWithLayoutMorph(309303040)
		submorphs: 	an Array(a RubCursor(1068167424) a RubPrimarySelectionMorph(33285760...etc...
		fullBounds: 	(0@0) corner: (1993@3679)
		color: 	Color transparent
		extension: 	a MorphExtension (804104448) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(472560896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1068167424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(390812416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1993@3679)
		owner: 	a TransformWithLayoutMorph(309303040)
		submorphs: 	an Array(a RubCursor(1068167424) a RubPrimarySelectionMorph(33285760...etc...
		fullBounds: 	(0@0) corner: (1993@3679)
		color: 	Color transparent
		extension: 	a MorphExtension (804104448) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(472560896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1068167424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(390812416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1993@3679)
		owner: 	a TransformWithLayoutMorph(309303040)
		submorphs: 	an Array(a RubCursor(1068167424) a RubPrimarySelectionMorph(33285760...etc...
		fullBounds: 	(0@0) corner: (1993@3679)
		color: 	Color transparent
		extension: 	a MorphExtension (804104448) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(472560896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1068167424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(390812416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1993@3679)
		owner: 	a TransformWithLayoutMorph(309303040)
		submorphs: 	an Array(a RubCursor(1068167424) a RubPrimarySelectionMorph(33285760...etc...
		fullBounds: 	(0@0) corner: (1993@3679)
		color: 	Color transparent
		extension: 	a MorphExtension (804104448) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(472560896)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1068167424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(932937984)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(390812416)
	Receiver's instance variables: 
		bounds: 	(998@774) corner: (1014@790)
		owner: 	a WorldMorph(286586112) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (560914176)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(998@774) mouseOver CMD SHIFT CTRL 432950 nil]
		targetOffset: 	(185.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 431319 998 774 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(932937984)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(998@774) corner: (1014@790)
		owner: 	a WorldMorph(286586112) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (560914176)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(998@774) mouseOver CMD SHIFT CTRL 432950 nil]
		targetOffset: 	(185.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 431319 998 774 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(286586112) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (2048@1034)
		hand: 	a HandMorph(932937984)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2048@1034)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(29396480) a TaskbarMorph(607217920) a System...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (899837696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(932937984))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(932937984))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(932937984))
		viewBox: 	(0@0) corner: (2048@1034)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(33044224))(a DropListM...etc...
		lastStepTime: 	440499
		lastStepMessage: 	nil
		lastCycleTime: 	440520
		alarms: 	a Heap()
		lastAlarmTime: 	440499
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(932937984)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(286586112) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (2048@1034)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2048@1034)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(29396480) a TaskbarMorph(607217920) a System...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (899837696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(286586112) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2048@1034)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(29396480) a TaskbarMorph(607217920) a System...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (899837696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(286586112) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(28...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(28...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-12-22T08:03:35.946889+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-12-22T08:03:35.946889+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-12-22T08:03:35.946889+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-12-22T08:03:35.946889+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-12-22T08:03:35.946889+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-12-22T08:03:35.946889+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

